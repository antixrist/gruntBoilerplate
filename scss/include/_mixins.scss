
@import "_relative-units";

@function _image-url ($image, $only-path:false) {
	@return image-url($image, $only-path, false);
}

@mixin link-style ($normal-color: $red-color, $border-color: transparentize($normal-color, .7)) {
	$active-color: lighten($red-color, 20%);
	@include link-colors($normal-color, $normal-color, $active-color, $normal-color, $active-color);
	@include transition(border-bottom #{$link-transition-duration} ease-in, color #{$link-transition-duration} ease-out);
	text-decoration	: none;
	border-bottom	: 1px solid;
	border-color	: $border-color;
	&:hover {
		border-color: $normal-color;
		&:focus {
			color: $active-color;
		}
	}
	&:active {
		border-color: $active-color;
		// &:hover {
		// 	border-color: $normal-color;
		// }
	}
	&:focus {
		border-color: $active-color;
	}
}

/* inline-block элементы */
@mixin ib ($full-width: false, $child-selector: '*', $child-width: auto, $font-size: $base-font-size) {
	list-style		: none;
	letter-spacing	: -1px;
	line-height		: 0;
	font-size		: 0;
	text-decoration	: none;
	padding			: 0;
	margin			: 0;
	@if $full-width == true {
		@include rem(font-size, $font-size);
		// font-size		: $font-size;
		text-align		: justify;
		text-justify	: newspaper;
		text-align-last	: justify;
		noindex:-o-prefocus & {
			font-size:2px;
		}
		&:after {
			width		: 100%;
			height		: 0px;
			visibility	: hidden;
			overflow	: hidden;
			content		: '';
			display		: inline-block;
		}
		.ie6 &, .ie7 & {
			zoom: 1;
		}
	}
	@if $child-selector != false {
		& > #{unquote($child-selector)} {
			@include rem(font-size, $font-size);
			letter-spacing	: normal;
			line-height		: normal;
			vertical-align	: top;
			display			: -moz-inline-stack;
			display			: inline-block;

			@if $full-width == true {
				@include rem(width, $child-width);
				// width			: $child-width;
				text-align: left;
			}
			.ie6 &, .ie7 & {
				zoom	: 1;
				display	: inline;
			}
		}
	}
}

@mixin ib-child ($width: auto, $font-size: $base-font-size) {
	@include rem(font-size, $font-size);
	letter-spacing	: normal;
	line-height		: normal;
	vertical-align	: top;
	display			:-moz-inline-stack;
	display			:inline-block;

	@if $width != auto {
		@include rem(width, $width);
		// width			: $child-width;
		text-align: left;
	}
	.ie6 &, .ie7 & {
		zoom	:1;
		display	:inline;
	}
}

@mixin image-dimentions ($image, $unit: rem, $font-size: $base-font-size) {
	$width	: image-width($image);
	$height	: image-height($image);
	@if $unit == rem {
		@include rem(width, $width);
		@include rem(height, $height);
	} @elseif $unit == em {
		@include em(width, $width, $font-size);
		@include em(height, $height, $font-size);
	} @else {
		width	: $width;
		height	: $height;
	}
}

$opacity-list-transition: opacity .2s ease-in;
$opacity-list-opacity: .5;
@mixin opacity-list ($child-selector: '> *', $opacity: $opacity-list-opacity, $transition: $opacity-list-transition) {
	$child-selector: unquote($child-selector);
	& #{$child-selector} {
		@include transition($transition);
	}
	&:hover #{unquote($child-selector)} {
		opacity: $opacity;
		&:hover {
			opacity: 1;
		}
	}
}

@mixin block-center ($width: auto, $unit: rem) {
	@if $unit == rem {
		@include rem(width, $width);
	} @else {
		width : $width;
	}
	margin-left		: auto;
	margin-right	: auto;
}

@function get-dimentions-summ ($value, $dir: vertical, $font-size: $base-font-size, $unit: rem) {
	// summ in pixels
	$summ: 0;
	$length: length($value);
	@if type-of($value) == list {
		$value: px($value);
		@if $length == 2 {
			@if $dir == vertical {
				$summ: $summ + (nth($value, 1) * 2);
			} @elseif $dir == horizontal {
				$summ: $summ + (nth($value, 2) * 2);
			}
		} @elseif $length == 3 {
			@if $dir == vertical {
				$summ: $summ + nth($value, 1) + nth($value, 3);
			} @elseif $dir == horizontal {
				$summ: $summ + nth($value, 2);
			}
		} @elseif $length == 4 {
			@if $dir == vertical {
				$summ: $summ + nth($value, 1) + nth($value, 3);
			} @elseif $dir == horizontal {
				$summ: $summ + nth($value, 2) + nth($value, 4);
			}
		}

	} @elseif type-of($value) == number {
	// and $dir == horizontal 
		// $summ: $summ + px($value, $font-size);
		$summ: px($value, $font-size) * 2;
	}
	// convert to needed $unit
	@return to-unit($summ, $unit);
}

$input-font-size	: $base-font-size !default;
$input-border-width	: 1px !default;
$input-padding		: 2px 3px !default;
$input-shadow		: inset em(0 3px 2px -3px, $input-font-size) rgba($black-color, .5);

@function calc-input-height ($unit: rem) {
	$height: 0;
	$height: $height + to-unit($input-font-size, $unit);
	$height: $height + get-dimentions-summ($input-border-width, vertical, $input-font-size, $unit);
	$height: $height + get-dimentions-summ($input-padding, vertical, $input-font-size, $unit);
	$height: to-unit($height, $unit);
	@return $height;
}
@mixin input-style () {
	text-align		: left;
	border-width	: em(1px, $input-font-size);
	border-style	: solid;
	border-color	: lighten($black-color, 60%) lighten($black-color, 88.5%) lighten($black-color, 97.3%);
	background		: #fff;
	box-shadow		: $input-shadow;
	@include rem(font-size, $input-font-size);
	@include rem(padding, 2px 3px);
	@content;
}

@mixin border ($border-width: 1px, $border-color: $active-border-color, $border-style: dotted, $type: border) {
	@include rem(#{$type}-width, $border-width);
	#{$type}-color: $border-color;
	#{$type}-style: $border-style;
}
@mixin active-border ($border-style: outline) {
	@include border(1px, $active-border-color, dotted, $border-style);
}
@mixin inactive-border ($border-style: outline) {
	@include border(1px, $inactive-border-color, dotted, $border-style);
}